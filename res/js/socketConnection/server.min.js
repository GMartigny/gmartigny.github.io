
function SocketManager(b,c){this.socket=b;this.protocol=c;var a=this;this.connection.on("error",function(d){a.onerror.call(a,d)});this.connection.on("message",function(d){a.message.call(a,d)});this.connection.on("close",function(d){a.onclose.call(a,d)});this.id=SocketManager.uniqid();SocketManager.list[this.id]=this}SocketManager.list={};SocketManager.uniqid=function(){return Date.now().toString(36)};SocketManager.prototype={onsend:null,onmessage:null,onerror:null,onclose:null,message:function(a){var b=JSON.parse(a.data);if(this.onmessage){this.onmessage(b)}if(this.protocol[b.type]){this.protocol[b.type](b.message)}else{this.onerror({message:"Message type "+b.type+" unknown in this protocol"})}},send:function(b,c){var a={type:b,message:c,_timestamp:Date.now()};this.socket.sendUTF(JSON.stringify(a));if(this.onsend){this.onsend(a)}},broadcast:function(a,b){var c=SocketManager.list;for(var d in c){if(c.hasOwnProperty(d)&&c[d].id!=this.id){c[d].send(a,b)}}},close:function(){delete SocketManager.list[this.id];if(this.onclose){this.onclose()}}};